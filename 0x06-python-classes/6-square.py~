#!/usr/bin/python3

class Square:
    """
    Represents a square with a size attribute and an area method.

    Attributes:
        size (int): The size (side length) of the square.
    """
    def __init__(self, size=0, position=(0, 0)):
        """
        Initializes a Square instance.
        Args:
            size (int, optional): The side length of the square. Defaults to 0.
            position (tuple, optional): The position of the square. Defaults to (0, 0).
        Raises:
            TypeError: If size is not an integer or position is not a tuple.
            ValueError: If size is less than 0 or position does not contain 2 positive integers.
        """
        self.size = size
        self.position = position

    @property
    def size(self):
        """ Gets the side length of the square
        Returns: The size of the square """
        return self.__size

    @size.setter
    def size(self, value):
        """ Sets the value of the square
        Args:
            Value (int): The new size value
        Raises:
            TypeError: if value is not an int
            ValueError: if value is less than 0
        """
        if not isinstance(value, int):
            raise TypeError("size must be an integer")
        if value < 0:
            raise ValueError("size must be >= 0")
        self.__size = value

    @property
    def position(self):
        """ Gets the position of the square
        Returns: The position of the square """
        return self.__position

    @position.setter
    def position(self, value):
        """ Sets the position of the square
        Args:
            Value (tuple): The new position value
        Raises:
            TypeError: if value is not a tuple or doesn't contain 2 positive integers
        """
        if not isinstance(value, tuple) or len(value) != 2:
            raise TypeError("position must be a tuple of 2 positive integers")
        if not all(isinstance(val, int) and val >= 0 for val in value):
            raise TypeError("position must be a tuple of 2 positive integers")
        self.__position = value

    def area(self):
        """
        Returns: The area of the square (an int).
        """
        return self.__size ** 2

    def my_print(self):
        """ prints the area of the square symbolically using #"""
        if self.__size == 0 and position[1] <= 0:
            print()
        else:
            for i in range(self.__size):
                print(' ' * self.__position[0] + '#' * self.__size)
