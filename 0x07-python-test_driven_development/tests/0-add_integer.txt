The ``0-add_integer`` module
===========================

Using ``0-add_integer``
----------------------

This is an example text file for testing the `0-add_integer` module.
First, import the `add_integer` function from the module:

    >>> add_integer = __import__("0-add_integer").add_integer

Now, let's test the function with various inputs:

Adding two positive integers:

    >>> add_integer(27, 74)
    101

Adding two floats:

    >>> add_integer(2.5, 3.7)
    6

Attempting to add a non-integer:

    >>> add_integer('a')
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Attempting to add a mixed type:

    >>> add_integer(5, 'abc')
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Adding two negative integers:

    >>> add_integer(-5, -10)
    -15

Adding an integer with the default value:

    >>> add_integer(2)
    100

Adding two zeros:

    >>> add_integer(0, 0)
    0

Adding NULL Values:

    >>> add_integer(None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

What if args are empty:

    >>> add_integer()
    Traceback (most recent call last):
    ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

Float overflow instances:

    >>> add_integer(1, float('inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Testing NaN:

    >>> add_integer(1, float('nan'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer
